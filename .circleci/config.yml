---
version: 2.1

orbs:
  python: tinyclues/python@3.5.8

executors:
  python:
    docker:
      - image: circleci/python:3.7

aliases:
  all_branches_and_tags: &all_branches_and_tags
    filters:
      tags:
        only: /.*/
      branches:
        only: /.*/

# copy from https://circleci.com/developer/orbs/orb/tinyclues/python#jobs-run_in_pipenv_env
# TODO try to remove this copy and use `run_in_pipenv_env` directly
jobs:
  run_in_pipenv:
    description: >
      Run `command` in a pipenv environment. It use circleci cache to prevent build it again if file did not change.
      `command` can be empty. In this case, it will just ensure that environment is build and cached.
    environment:
      PIPENV_VENV_IN_PROJECT: 1
    executor: << parameters.executor >>
    parameters:
      command:
        default: ''
        description: 'Command to run. Can be empty, to only build pipenv environment'
        type: string
      executor:
        default: python3-stretch
        description: python executor
        type: executor
      persist_directory:
        default: ''
        description: directory to persist in workspace
        type: string
      persist_directory2:
        default: ''
          description: another directory to persist in workspace
          type: string
      pipenv_env_type:
        default: prod
        description: 'The pipenv environment type, ''prod'' or ''dev''. Default ''prod''.'
        type: string
    steps:
      - checkout
      - run:
          name: update pipenv
          command: pip install --upgrade pipenv
      - restore_cache:
          key: >-
            v0-6-pipenv-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-<< parameters.pipenv_env_type >>-{{ checksum "Pipfile.lock" }}
      - run:
          command: |
            if [ "<< parameters.pipenv_env_type >>" = "prod" ]; then
                [ -d .venv ] || pipenv install --deploy
            else
                [ -d .venv ] || pipenv install --deploy --dev
            fi
          name: create environement if not exists (dev or prod)
      - save_cache:
          key: >-
            v0-6-pipenv-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-<< parameters.pipenv_env_type >>-{{ checksum "Pipfile.lock" }}
          paths:
            - .venv
      - when:
          condition: << parameters.command >>
          steps:
            - run: # FIXME why do we need to install pipenv again ?
                command: |
                  pipenv run pip install --upgrade pipenv
                  export PYTHONPATH=/home/circleci/project/
                  pipenv run << parameters.command >>
                name: run << parameters.command >>
      - when:
          condition: << parameters.persist_directory >>
          steps:
            - persist_to_workspace:
                paths:
                  - << parameters.persist_directory >>/*
                root: .
      - when:
          condition: << parameters.persist_directory2 >>
          steps:
            - persist_to_workspace:
                paths:
                  - << parameters.persist_directory2 >>/*
                root: .

workflows:
  build:
    jobs:
      - run_in_pipenv:
          name: cython_setup
          pipenv_env_type: dev
          executor: python
          persist_directory: build
          persist_directory2: cyperf
          command: ./setup.py build_ext -i -j2
          <<: *all_branches_and_tags
      - run_in_pipenv:
          name: run_lint
          pipenv_env_type: dev
          executor: python
          requires:
            - cython_setup
          command: pylint labeledmatrix cyperf --rcfile=setup.cfg
          <<: *all_branches_and_tags
      - run_in_pipenv:
          name: unit_tests
          pipenv_env_type: dev
          executor: python
          requires:
            - cython_setup
          command: pipenv run pytest tests --durations=10
          <<: *all_branches_and_tags

      - python/pipenv_deploy:  # TODO do we need sdist in setup.py command ?
          name: deploy_wheel
          requires:
            - unit_tests
          context: artifactory
          executor: python
          <<: *all_branches_and_tags
